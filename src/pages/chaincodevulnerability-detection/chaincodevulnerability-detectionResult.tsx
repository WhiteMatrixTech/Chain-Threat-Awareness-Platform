/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/*
 * @Description:
 * @Author: didadida262
 * @Date: 2024-08-29 10:18:39
 * @LastEditors: didadida262
 * @LastEditTime: 2024-09-28 01:55:54
 */
/* eslint-disable @typescript-eslint/restrict-template-expressions */
/* eslint-disable prettier/prettier */

import { message, notification } from "antd";
import cn from "classnames";
import { useEffect, useRef, useState } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { useParams } from "react-router-dom";

import code_logo from "@/assets/code_logo.png";
import IdentityInferenceDialogTitle from "@/assets/IdentityInferenceDialogTitle.png";
import search_logo from "@/assets/search_logo.png";
import { ButtonCommonV2, EButtonType } from "@/components/ButtonCommonV2";
import { InputCommonV4 } from "@/components/InputCommonV4";
import { Progress } from "@/components/progres";
import { ResultComponent } from "@/components/ResultComponent";
import { ResultComponentV2 } from "@/components/ResultComponentV2";
import { TableCommonV4 } from "@/components/TableCommonV4";
import { columnsChainCode } from "@/services/columns";
import {
  detectActionLogRequestType,
  detectActionLogService,
  detectChainCodeRequestType,
  detectChainCodeService
} from "@/services/detection";
import { leakMap } from "@/services/mockData/leakCode/leakCode";
import pattern from "@/styles/pattern";

export function ChaincodevulnerabilityDetectionResult() {
  const { name } = useParams();
  const codeContainer = useRef<HTMLDivElement | null>(null);

  const inputVal = localStorage.getItem("chaincodeInfo");

  const [loading, setloading] = useState(true);
  const [result, setResult] = useState({
    time: "",
    content: "",
    leakType: []
  });

  const [dataList, setDateList] = useState<any>([]);
  const getFinalTableData = (data: any) => {
    const result: any = [];
    for (const item of data) {
      const output = JSON.parse(item.output);
      if (!output.leakCount) {
        const zeroItem = {
          file: item.input,
          time: item.createAt,
          num: output.leakCount,
          type: output.leakType[0],
          reason: output.leakReason[0]
        };
        result.push(zeroItem);
      } else {
        for (let i = 0; i < output.leakCount; i++) {
          const zeroItem: any = {
            file: item.input,
            time: i === 0 ? item.createAt : "",
            num: i === 0 ? output.leakCount : "",
            type: output.leakType[i],
            reason: output.leakReason[i]
          };
          result.push(zeroItem);
        }
      }
    }
    return result;
  };
  const addCode = () => {
    if (codeContainer.current) {
      console.log("codeContainer.current>>>", codeContainer.current);
      if (inputVal) {
        const codeElement = document.createElement("pre");
        codeElement.textContent = JSON.parse(inputVal);
        codeContainer.current.appendChild(codeElement);
      }
    }
  };
  const start = async () => {
    if (!inputVal) {
      notification.warning({ message: `无输入值!!!` });
      return;
    }
    setloading(true);
    try {
      const params: detectChainCodeRequestType = {
        code: JSON.parse(inputVal),
        chain: "eth"
      };
      const respose = await detectChainCodeService(params);
      console.log("respose>>>", respose);
      setResult({
        ...result,
        leakType: respose.leakType.map((key: any) => {
          const item = leakMap.filter((i: any) => i.key === key)[0];
          return {
            ...item
          };
        }),
        content:
          respose.leakCount === 0
            ? "检测完成，没有漏洞。"
            : respose.leakReason.join("\n"),
        time: (respose.cost / 1000).toFixed(1) + "s"
      });
      const paramsLog: detectActionLogRequestType = {
        action: "chaincode",
        count: 10
      };
      const resposeLog = await detectActionLogService(paramsLog);
      console.log("resposeLog>>>2", resposeLog);
      const finalTableData: any = getFinalTableData(resposeLog.data);

      setDateList(finalTableData);
      setloading(false);
      addCode();
    } catch (error) {
      setloading(false);
    }
  };
  useEffect(() => {
    // 请求
    void start();
  }, []);

  return loading
    ? <div
        className={cn(
          "w-full h-full absolute top-0 left-0",
          `${pattern.flexCenter}`
        )}
      >
        {/* <AiOutlineLoading3Quarters
          className="ml-2 animate-spin"
          style={{ color: "white", fontSize: "24px" }}
        /> */}
        <Progress />
      </div>
    : <div
        className={cn(" w-full h-full pt-[0px] fadeIn", `${pattern.flexbet}`)}
      >
        <div className={cn(`w-full h-full flex flex-col `)}>
          <div className="w-full h-[calc(100%_-_280px)]  flex justify-between">
            <div className="left w-[calc(40%_-_10px)] h-full flex flex-col justify-between ">
              <ResultComponentV2 title="输入信息" className="w-full h-[50px]" />
              <div
                className={cn(
                  `w-full h-[calc(100%_-_60px)]  px-4 py-4 overflow-scroll`,
                  `border-[2px] border-solid border-[#0D53B7]`,
                  `bg-[#0095FF66]`
                )}
              >
                <span
                  className="text-[14px] text-[#ffffff]"
                  ref={codeContainer}
                >
                  {/* {inputVal && JSON.parse(inputVal)} */}
                </span>
              </div>
            </div>
            <div className="right w-[calc(60%_-_10px)] h-full  flex flex-col justify-between">
              <ResultComponent
                title="检测时间"
                content={result.time}
                className="w-full h-[50px]"
              />
              <div
                className={cn(
                  "w-full h-[50px] flex items-center justify-start "
                )}
              >
                <ResultComponentV2 title="检测报告" className="w-full h-full" />
              </div>
              <div
                className={cn(
                  `w-full h-[calc(100%_-_120px)] px-4 py-4 overflow-scroll `,
                  // `border-[2px] border-solid border-[#0D53B7]`,
                  `bg-[#0095FF66]`
                )}
              >
                <span className="text-[16px] text-[#ffffff]">
                  {result.content}
                </span>
                {result.leakType.map((item: any, index: number) =>
                  <div
                    className="w-full flex flex-col justify-between mt-[20px]"
                    key={index}
                  >
                    <div className="w-full h-[21px] text-[16px] text-[#ffffff] flex justify-between items-center">
                      <div className="w-[93px] h-full flex justify-between items-center">
                        <img src={code_logo} alt="" width={21} height={21} />
                        <span className="ml-[8px]">漏洞原因</span>
                      </div>
                      <div className="w-[calc(100%_-_100px)] h-full flex justify-start items-center">
                        {item.title}
                      </div>
                    </div>
                    <div className="w-full text-[16px] text-[#ffffff] flex justify-between items-start mt-[10px]">
                      <div className="w-[93px] h-full flex justify-between items-center">
                        <img src={search_logo} alt="" width={21} height={21} />
                        <span className="ml-[8px]">示例代码</span>
                      </div>
                      <pre className="w-[calc(100%_-_100px)] h-full bg-[#FFFFFF1A] overflow-scroll px-[10px]">
                        {item.code}
                      </pre>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          <div className={cn(` w-full h-[272px] mt-4`)}>
            <TableCommonV4
              className="w-full h-full"
              data={dataList}
              columns={columnsChainCode}
            />
          </div>
        </div>
      </div>;
}
