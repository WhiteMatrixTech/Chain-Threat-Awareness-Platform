/*
 * @Description:
 * @Author: didadida262
 * @Date: 2024-08-29 10:18:39
 * @LastEditors: didadida262
 * @LastEditTime: 2024-09-05 15:20:25
 */
/* eslint-disable @typescript-eslint/restrict-template-expressions */
/* eslint-disable prettier/prettier */

import cn from "classnames";
import { useEffect, useState } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { useParams } from "react-router-dom";

import IdentityInferenceDialogTitle from "@/assets/IdentityInferenceDialogTitle.png";
import { ButtonCommonV2, EButtonType } from "@/components/ButtonCommonV2";
import { InputCommonV4 } from "@/components/InputCommonV4";
import { ResultComponent } from "@/components/ResultComponent";
import { ResultComponentV2 } from "@/components/ResultComponentV2";
import { TableCommonV2 } from "@/components/TableCommonV2";
import { columnsChainCode } from "@/services/columns";
import {
  detectChainCodeRequestType,
  detectChainCodeService
} from "@/services/detection";
import pattern from "@/styles/pattern";

export function ChaincodevulnerabilityDetectionResult() {
  const { name } = useParams();
  const [loading, setloading] = useState(true);
  const [result, setResult] = useState({
    time: 0,
    content: ""
  });

  const [dataList, setDateList] = useState<any>([]);
  const start = async () => {
    setloading(true);
    try {
      const params: detectChainCodeRequestType = {
        name: name || "",
        chain: "eth"
      };
      const respose = await detectChainCodeService(params);
      console.log("respose>>>", respose);
      setResult({
        ...result,
        content: JSON.stringify(respose),
        time: respose.cost
      });
      setloading(false);
    } catch (error) {
      setloading(false);
    }
    const res1 = [
      {
        file: 1,
        time: "2024-8-20 16:00",
        num: 100,
        type: "a",
        resaon: "在Golang中，开发者可以通过将返回值赋给“_”变量来跳过接收返回值"
      }
    ];

    setDateList([...res1, ...res1, ...res1, ...res1]);
  };
  useEffect(() => {
    // 请求
    void start();
  }, []);

  return loading
    ? <div
        className={cn(
          "w-full h-full absolute top-0 left-0",
          `${pattern.flexCenter}`
        )}
      >
        <AiOutlineLoading3Quarters
          className="ml-2 animate-spin"
          style={{ color: "white", fontSize: "24px" }}
        />
      </div>
    : <div
        className={cn(" w-full h-full pt-[0px] fadeIn", `${pattern.flexbet}`)}
      >
        <div className={cn(`w-full h-full flex flex-col `)}>
          <div
            className={cn(
              "w-full h-[50px] flex items-center justify-start mb-1"
            )}
          >
            <ResultComponentV2 title="检测报告" className="w-full h-full" />
          </div>
          <div
            className={cn(
              `w-full h-[348px] mb-5 px-4 py-4`,
              `border-[2px] border-solid border-[#0D53B7]`,
              `bg-[#0095FF66]`
            )}
          >
            <span className="text-[16px] text-[#ffffff]">
              {result.content}
            </span>
          </div>
          <div className={cn(` w-full h-[272px] mt-4`)}>
            <TableCommonV2
              className=""
              data={dataList}
              columns={columnsChainCode}
            />
          </div>
        </div>
      </div>;
}
